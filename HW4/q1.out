Standard ML of New Jersey (64-bit) v110.99.2 [built: Sun Mar 20 20:10:23 2022]
[opening hw4_q1.sml]
[opening hw4_q1_def.sml]
[opening hw2_q3.sml]
datatype cell = alive | empty
val is_alive = fn :
  cell * cell * cell -> cell * cell * cell -> cell * cell * cell -> cell
val it = () : unit
[opening hw3_q1.sml]
[opening hw3_q1_def.sml]
val toChar = fn : bool -> char
val it = () : unit
val mapState = fn : ('a -> 'b) -> 'a list list -> 'b list list
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val toString = fn : char list -> string
val frameToState = fn : string list -> bool list list
val stateToFrame = fn : bool list list -> string list
val printFrame = fn : string list -> unit
val it = () : unit
[opening hw3_q2.sml]
[opening hw3_q2_def.sml]
signature KERNEL1D_SIG =
  sig
  type source
  type target
  val kernel : source -> source -> source -> target
  val default : source -> source
end
signature KERNEL2D_SIG =
  sig
  type source
  type target
  val kernel :
      source * source * source
       -> source * source * source -> source * source * source -> target
  val default : source -> source
end
val it = () : unit
functor Kernel1D(Elt: sig
  type source
  type target
  val kernel : source -> source -> source -> target
  val default : source -> source
end) :
sig
  val runKernel : Elt.source list -> Elt.target list
end
val sum = fn : int -> int -> int -> int
structure SumKernel : sig
  val runKernel : Elt.source list -> Elt.target list
end
val it = [3,6,9,7] : int list
exception SizeNotEqual
val zip = fn : 'a list -> 'b list -> 'c list -> ('a * 'b * 'c) list
val it = [(1,4,7),(2,5,8),(3,6,9)] : (int * int * int) list
exception NegativeLength
val fill = fn : 'a -> int -> 'a list
val it = [false,false,false] : bool list
[autoloading]
[autoloading done]
functor Kernel2D(Elt: sig
  type source
  type target
  val kernel :
      source * source * source
       -> source * source * source -> source * source * source -> target
  val default : source -> source
end) :
sig
  val runKernel : source list -> target list list
end
val it = () : unit
val is_alive_bool = fn :
  bool * bool * bool -> bool * bool * bool -> bool * bool * bool -> bool
val run = fn : (unit -> 'a) -> int -> real -> unit
val start_frame =
  ["                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                                                                      #",
   "                     ***  ***  ***  ***   *   ***                     #",
   ...] : string list
val it = () : unit
val runCycle = fn : string list -> string list
val gameOfLife = fn : string list -> unit -> unit
- ===TEST START===
val it = () : unit
val test1 = "PASSED" : string
val game = fn : unit -> unit
 *** 
 * * 
 *** 
val it = () : unit
 * * 
*   *
 * * 
val it = () : unit
     
** **
     
val it = () : unit

